login_demo项目构建 -----2019_7_30
目标：初步学习Flask来构建一个登录、注册模块
"""
# 开始看书，Flask web开发，看完还是稀里糊涂的
毕竟没有学过前端，HTML文件还并不是很清楚
慢慢开始理解前端的一些东西
现在开始记录项目过程中的一些知识

"""
Flask-Web项目结构：
Flasky     # 程序根目录
├── app     # 核心模块目录
│   ├── email.py     # 邮件发送模版
│   ├── __init__.py
│   ├── main     # 蓝图模块目录
│   │   ├── errors.py     # 错误处理模块
│   │   ├── forms.py     # 页面表单模块
│   │   ├── __init__.py
│   │   └── views.py     # 正常处理模块
│   ├── models.py     # 对象关系映射模块
│   ├── static     # 页面静态资源目录
│   │   └── favicon.ico     # 页面收藏夹图标
│   └── templates     # 默认存放页面模版目录
│       ├── 404.html
│       ├── base.html
│       ├── index.html
│       ├── mail     # 邮件模块目录
│       │   ├── new_user.html
│       │   └── new_user.txt
│       └── user.html
├── config.py     # 程序配置文件
├── data-dev.sqlite     # 程序数据库文件
├── manage.py     # 程序管理启动文件
├── migrations     # 数据库迁移目录
│   ├── alembic.ini
│   ├── env.py
│   ├── README
│   ├── script.py.mako
│   └── versions
├── requirements.txt     # 所有依赖包文件
└── tests     # 测试文件目录
    ├── __init__.py
    └── test_basics.py
	
	
————————————————————————————————————————————————————————————————————————————————————————————————|
Start:																							|
																								|
上面是项目的文件结构，可以参考																	|
在login_demo中:																					|
————login_demo文件中存放一些主要的视图函数														|
————templates中存放的是HTML文件，属于前端的编写，												|
————Models中存放的是数据库映射模块，即数据库表中抽象出来的类。									|
————config文件中存放数据库配置文件，以及一些常用配置参数，包括session中的SECRECT_KEY			|
————exts文件用于对db进行配置，是为了解决循环引用的问题，即login_demo向Models文件import抽象类	|
而Models文件向login_demo.py文件import db的循环引用问题											|
————manage文件即包含了flask-script以及Manager、Migrate、MigrateCommand						 	|
用于以命令行的形式来进行数据库迁移																|
																								|
————————————————————————————————————————————————————————————————————————————————————————————————|



----------------------------------------------------------------------------
看完书后开始构建项目
一、构建基本的项目模块
构建项目目录
1.编写config.py文件，包含一些数据库配置
在config中Database选项需要在Mysql命令行中创建新的数据库login_demo数据库
在Mysql命令行中使用creat database login_demo charset utf8命令行建立数据库
然后在config.py文件中加入一些数据库参数完成配置。（包括session参数）
2.在login_demo.py文件中
包含一些基本的包，并且注册app
3.在exts.py文件中注册db
4.在manage.py文件中包含Manager、Migrate、MigrateCommand包
然后将app与db绑定，并加入至Manager中
添加Manager运行代码

if __name__ == '__main__':
    manager.run()

二、开始构建导航条

**导航条**

1.在bootst官方中文文档中找到CDN加速url

————<1> min.css
————<2> jquery.min.js
————<3> min.js

2.根据自己的需求开始对官方文档的模板进行删除更改
将Brand标签换作了主页图标，具体可在文档中字体图标找到：
#	一个屋子的图标放在主页最左上角 在bootstrap中文文档组件中查询
	<span class ="glyphicon glyphicon-home"></span>
在将其他组件进行更改

三、进行父模板抽离

**父模板抽离**

1.复制index.html中的原有代码，并新建base.html文件 
运用{% block %}{% endblock %}，在base.html文件中加入你在子模板想要更改的地方
for example:
更改标题：<title>{% block title %}{% endblock %}</title>
更改正文部分: {% block main %}{% endblock %}

在子模板中继承父模板
	{exends 'base.html'}
	{% block title %}
#在这之间加入代码，即可实现子模板的功能
	{% endblock %}


四、构建登录、注册界面

**编写前端文件**
在static中创建css文件，并且在里面创建
base.css  login.css register.css

----------------------------

首先继承base.html
{% extends base.html %}（继承导航条栏目）

----------------------------

在{% block link %} 

{% endblock%}
中编写导入css标签链接

----------------------------

在 {% block main %}

{% endblock%}
中编写具体登录、注册页面

----------------------------

<1>注册页面
先编写注册前端文件

编写 <h3>注册页头</h3>
在表单<form action="" method="POST"> </form>中
编写<form class=form_container> </form>，在css中添加样式
登录中提交表单为 
<div class ="form-group"> 
	<input type="text" class="form-group" placeholder="提交的表单" name="在视图函数中可以通过request.form.get('xxx')引用">
</div>
登录中提交按钮
<button class="btn btn-primary btn-block>提交</button>


<2>登录页面
登录页面和注册页面前端代码基本相同


五、编写models.py 构建数据库模型
# 编写User类

* `python manage.py db init`：初始化一个迁移脚本的环境，只需要执行一次。
* `python manage.py db migrate`：将模型生成迁移文件，只要模型更改了，就需要执行一遍这个命令。
* `python manage.py db upgrade`：将迁移文件真正的映射到数据库中。每次运行了`migrate`命令后，就记得要运行这个命令。

六、注册 登录功能编写

1.注册功能

判断method是‘POST’还是‘GET’
如果是‘GET’渲染模板
如果是‘POST’将之前前端的name——username、password、password_check
通过request.form.get('name')存储到变量中
首先通过 User.query.filter(User.username == username).first() 
判断是否有相同用户，通过两个密码变量判断两次密码输入是否正确
最后无误后，创建user_check = User(username='xxx', password='xxx')变量
通过db.session.add(user_check)加入到会话
并提交会话db.session.commit()
注册成功后，返回到登录界面 return redirect(url_for('login'))

2.登录功能

判断method是‘POST’还是‘GET’
如果是‘GET’渲染模板,将之前前端的name——username、password
通过request.form.get('name')存储到变量中
首先通过 User.query.filter(User.username==username，User.password==password).first()
检验用户账号密码是否相同
# 匹配以后，要想登录成功并且浏览器一直记住登录状态，需要设置cookie
            session['user_id'] = user_check.id
            # 想在31天内都不登陆(记住31天)
            # session.permanent = True
登录成功后返回到主页return redirect(url_for('index'))


七、注册、登录页面切换 需要使用到上下文钩子函数
使用context_processor上下文钩子函数

# 上下文钩子函数
@app.context_processor
def my_context_processor():
    # 通过session来判断用户是否登陆成功
    # 钩子函数返回的字典在所有文件中都可以用
    user_id = session.get('user_id')
    if user_id:
        user = User.query.filter(User.id == user_id).first()
        if user:
            return {'user': user}
    return {}
	
然后在前端文件中编写
			<!-- 登录与注册链接以及切换-->
          <ul class="nav navbar-nav navbar-right">
              {% if user %}
              <li><a href="#">{{ user.username }}</a></li>
              <li><a href="{{ url_for('logout') }}">注销</a></li>
              {% else %}
              <li><a href="{{ url_for('login') }}">登录</a></li>
              <li><a href="{{ url_for('register') }}">注册</a></li>
              {% endif%}
			</ul>  

八、 生成requirments.txt文件

---------------------------------------------------------------------------------------------









